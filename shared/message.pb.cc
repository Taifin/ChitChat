// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared/message.proto

#include "shared/message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ChitChatMessage {
PROTOBUF_CONSTEXPR Query_User::Query_User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_coord_)*/0
  , /*decltype(_impl_.y_coord_)*/0} {}
struct Query_UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_UserDefaultTypeInternal() {}
  union {
    Query_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_UserDefaultTypeInternal _Query_User_default_instance_;
PROTOBUF_CONSTEXPR Query::Query(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_.game_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.rtype_)*/0
  , /*decltype(_impl_.ftype_)*/0
  , /*decltype(_impl_.score_)*/0} {}
struct QueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace ChitChatMessage
static ::_pb::Metadata file_level_metadata_shared_2fmessage_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_shared_2fmessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_shared_2fmessage_2eproto = nullptr;

const uint32_t TableStruct_shared_2fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query_User, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query_User, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query_User, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query_User, _impl_.skin_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query_User, _impl_.x_coord_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query_User, _impl_.y_coord_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _impl_.rtype_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _impl_.ftype_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _impl_.users_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::ChitChatMessage::Query, _impl_.game_name_),
  2,
  3,
  1,
  ~0u,
  4,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::ChitChatMessage::Query_User)},
  { 16, 28, -1, sizeof(::ChitChatMessage::Query)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ChitChatMessage::_Query_User_default_instance_._instance,
  &::ChitChatMessage::_Query_default_instance_._instance,
};

const char descriptor_table_protodef_shared_2fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024shared/message.proto\022\017ChitChatMessage\""
  "\325\005\n\005Query\0221\n\005rType\030\001 \001(\0162\".ChitChatMessa"
  "ge.Query.RequestType\0222\n\005fType\030\002 \001(\0162#.Ch"
  "itChatMessage.Query.FeedbackType\022)\n\004user"
  "\030\003 \001(\0132\033.ChitChatMessage.Query.User\022*\n\005u"
  "sers\030\004 \003(\0132\033.ChitChatMessage.Query.User\022"
  "\r\n\005score\030\005 \001(\005\022\021\n\tgame_name\030\006 \001(\t\032V\n\004Use"
  "r\022\014\n\004name\030\001 \002(\t\022\020\n\010password\030\002 \001(\t\022\014\n\004ski"
  "n\030\003 \001(\t\022\017\n\007x_coord\030\004 \001(\005\022\017\n\007y_coord\030\005 \001("
  "\005\"~\n\013RequestType\022\t\n\005LOGIN\020\000\022\014\n\010REGISTER\020"
  "\001\022\013\n\007CONNECT\020\003\022\010\n\004MOVE\020\004\022\016\n\nDISCONNECT\020\005"
  "\022\017\n\013CHANGE_SKIN\020\006\022\020\n\014CHANGE_SCORE\020\007\022\014\n\010G"
  "ET_SKIN\020\010\"\223\002\n\014FeedbackType\022\021\n\rNO_USER_FO"
  "UND\020\000\022\021\n\rLOGIN_ALLOWED\020\001\022\020\n\014LOGIN_DENIED"
  "\020\002\022\020\n\014USER_CREATED\020\003\022\022\n\016USER_DUPLICATE\020\004"
  "\022\026\n\022CONNECTION_SUCCESS\020\005\022\025\n\021CONNECTION_E"
  "XISTS\020\006\022\t\n\005MOVED\020\007\022\020\n\014DISCONNECTED\020\010\022\020\n\014"
  "SKIN_CHANGED\020\t\022\021\n\rSCORE_CHANGED\020\n\022\022\n\016DAT"
  "ABASE_ERROR\020\013\022\010\n\004SKIN\020\014\022\026\n\022NEW_USER_CONN"
  "ECTED\020\r"
  ;
static ::_pbi::once_flag descriptor_table_shared_2fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_shared_2fmessage_2eproto = {
    false, false, 767, descriptor_table_protodef_shared_2fmessage_2eproto,
    "shared/message.proto",
    &descriptor_table_shared_2fmessage_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_shared_2fmessage_2eproto::offsets,
    file_level_metadata_shared_2fmessage_2eproto, file_level_enum_descriptors_shared_2fmessage_2eproto,
    file_level_service_descriptors_shared_2fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_shared_2fmessage_2eproto_getter() {
  return &descriptor_table_shared_2fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_shared_2fmessage_2eproto(&descriptor_table_shared_2fmessage_2eproto);
namespace ChitChatMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Query_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_2fmessage_2eproto);
  return file_level_enum_descriptors_shared_2fmessage_2eproto[0];
}
bool Query_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Query_RequestType Query::LOGIN;
constexpr Query_RequestType Query::REGISTER;
constexpr Query_RequestType Query::CONNECT;
constexpr Query_RequestType Query::MOVE;
constexpr Query_RequestType Query::DISCONNECT;
constexpr Query_RequestType Query::CHANGE_SKIN;
constexpr Query_RequestType Query::CHANGE_SCORE;
constexpr Query_RequestType Query::GET_SKIN;
constexpr Query_RequestType Query::RequestType_MIN;
constexpr Query_RequestType Query::RequestType_MAX;
constexpr int Query::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Query_FeedbackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_2fmessage_2eproto);
  return file_level_enum_descriptors_shared_2fmessage_2eproto[1];
}
bool Query_FeedbackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Query_FeedbackType Query::NO_USER_FOUND;
constexpr Query_FeedbackType Query::LOGIN_ALLOWED;
constexpr Query_FeedbackType Query::LOGIN_DENIED;
constexpr Query_FeedbackType Query::USER_CREATED;
constexpr Query_FeedbackType Query::USER_DUPLICATE;
constexpr Query_FeedbackType Query::CONNECTION_SUCCESS;
constexpr Query_FeedbackType Query::CONNECTION_EXISTS;
constexpr Query_FeedbackType Query::MOVED;
constexpr Query_FeedbackType Query::DISCONNECTED;
constexpr Query_FeedbackType Query::SKIN_CHANGED;
constexpr Query_FeedbackType Query::SCORE_CHANGED;
constexpr Query_FeedbackType Query::DATABASE_ERROR;
constexpr Query_FeedbackType Query::SKIN;
constexpr Query_FeedbackType Query::NEW_USER_CONNECTED;
constexpr Query_FeedbackType Query::FeedbackType_MIN;
constexpr Query_FeedbackType Query::FeedbackType_MAX;
constexpr int Query::FeedbackType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Query_User::_Internal {
 public:
  using HasBits = decltype(std::declval<Query_User>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Query_User::Query_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChitChatMessage.Query.User)
}
Query_User::Query_User(const Query_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.skin_){}
    , decltype(_impl_.x_coord_){}
    , decltype(_impl_.y_coord_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_skin()) {
    _this->_impl_.skin_.Set(from._internal_skin(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_coord_, &from._impl_.x_coord_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_coord_) -
    reinterpret_cast<char*>(&_impl_.x_coord_)) + sizeof(_impl_.y_coord_));
  // @@protoc_insertion_point(copy_constructor:ChitChatMessage.Query.User)
}

inline void Query_User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.skin_){}
    , decltype(_impl_.x_coord_){0}
    , decltype(_impl_.y_coord_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Query_User::~Query_User() {
  // @@protoc_insertion_point(destructor:ChitChatMessage.Query.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.password_.Destroy();
  _impl_.skin_.Destroy();
}

void Query_User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_User::Clear() {
// @@protoc_insertion_point(message_clear_start:ChitChatMessage.Query.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.skin_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.x_coord_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_coord_) -
        reinterpret_cast<char*>(&_impl_.x_coord_)) + sizeof(_impl_.y_coord_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChitChatMessage.Query.User.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChitChatMessage.Query.User.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string skin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_skin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChitChatMessage.Query.User.skin");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 x_coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_x_coord(&has_bits);
          _impl_.x_coord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y_coord = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_y_coord(&has_bits);
          _impl_.y_coord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChitChatMessage.Query.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChitChatMessage.Query.User.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChitChatMessage.Query.User.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional string skin = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_skin().data(), static_cast<int>(this->_internal_skin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChitChatMessage.Query.User.skin");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_skin(), target);
  }

  // optional int32 x_coord = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x_coord(), target);
  }

  // optional int32 y_coord = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y_coord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChitChatMessage.Query.User)
  return target;
}

size_t Query_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChitChatMessage.Query.User)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string skin = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_skin());
    }

    // optional int32 x_coord = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x_coord());
    }

    // optional int32 y_coord = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_coord());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_User::GetClassData() const { return &_class_data_; }


void Query_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_User*>(&to_msg);
  auto& from = static_cast<const Query_User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChitChatMessage.Query.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_skin(from._internal_skin());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.x_coord_ = from._impl_.x_coord_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.y_coord_ = from._impl_.y_coord_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_User::CopyFrom(const Query_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChitChatMessage.Query.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_User::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Query_User::InternalSwap(Query_User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skin_, lhs_arena,
      &other->_impl_.skin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query_User, _impl_.y_coord_)
      + sizeof(Query_User::_impl_.y_coord_)
      - PROTOBUF_FIELD_OFFSET(Query_User, _impl_.x_coord_)>(
          reinterpret_cast<char*>(&_impl_.x_coord_),
          reinterpret_cast<char*>(&other->_impl_.x_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shared_2fmessage_2eproto_getter, &descriptor_table_shared_2fmessage_2eproto_once,
      file_level_metadata_shared_2fmessage_2eproto[0]);
}

// ===================================================================

class Query::_Internal {
 public:
  using HasBits = decltype(std::declval<Query>()._impl_._has_bits_);
  static void set_has_rtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ftype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ChitChatMessage::Query_User& user(const Query* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ChitChatMessage::Query_User&
Query::_Internal::user(const Query* msg) {
  return *msg->_impl_.user_;
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChitChatMessage.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.users_){from._impl_.users_}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.rtype_){}
    , decltype(_impl_.ftype_){}
    , decltype(_impl_.score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_name()) {
    _this->_impl_.game_name_.Set(from._internal_game_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::ChitChatMessage::Query_User(*from._impl_.user_);
  }
  ::memcpy(&_impl_.rtype_, &from._impl_.rtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.rtype_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:ChitChatMessage.Query)
}

inline void Query::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.users_){arena}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.rtype_){0}
    , decltype(_impl_.ftype_){0}
    , decltype(_impl_.score_){0}
  };
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:ChitChatMessage.Query)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_.~RepeatedPtrField();
  _impl_.game_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void Query::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:ChitChatMessage.Query)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.rtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.score_) -
        reinterpret_cast<char*>(&_impl_.rtype_)) + sizeof(_impl_.score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ChitChatMessage.Query.RequestType rType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChitChatMessage::Query_RequestType_IsValid(val))) {
            _internal_set_rtype(static_cast<::ChitChatMessage::Query_RequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ChitChatMessage.Query.FeedbackType fType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChitChatMessage::Query_FeedbackType_IsValid(val))) {
            _internal_set_ftype(static_cast<::ChitChatMessage::Query_FeedbackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ChitChatMessage.Query.User user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ChitChatMessage.Query.User users = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_game_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChitChatMessage.Query.game_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChitChatMessage.Query)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ChitChatMessage.Query.RequestType rType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rtype(), target);
  }

  // optional .ChitChatMessage.Query.FeedbackType fType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ftype(), target);
  }

  // optional .ChitChatMessage.Query.User user = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // repeated .ChitChatMessage.Query.User users = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_score(), target);
  }

  // optional string game_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChitChatMessage.Query.game_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_game_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChitChatMessage.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChitChatMessage.Query)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChitChatMessage.Query.User users = 4;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_impl_.users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string game_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional .ChitChatMessage.Query.User user = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional .ChitChatMessage.Query.RequestType rType = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rtype());
    }

    // optional .ChitChatMessage.Query.FeedbackType fType = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ftype());
    }

    // optional int32 score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }


void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query*>(&to_msg);
  auto& from = static_cast<const Query&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChitChatMessage.Query)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_.MergeFrom(from._impl_.users_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user()->::ChitChatMessage::Query_User::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rtype_ = from._impl_.rtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ftype_ = from._impl_.ftype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChitChatMessage.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.users_))
    return false;
  if (_internal_has_user()) {
    if (!_impl_.user_->IsInitialized()) return false;
  }
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_name_, lhs_arena,
      &other->_impl_.game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query, _impl_.score_)
      + sizeof(Query::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(Query, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shared_2fmessage_2eproto_getter, &descriptor_table_shared_2fmessage_2eproto_once,
      file_level_metadata_shared_2fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChitChatMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChitChatMessage::Query_User*
Arena::CreateMaybeMessage< ::ChitChatMessage::Query_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChitChatMessage::Query_User >(arena);
}
template<> PROTOBUF_NOINLINE ::ChitChatMessage::Query*
Arena::CreateMaybeMessage< ::ChitChatMessage::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChitChatMessage::Query >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
